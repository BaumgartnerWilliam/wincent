set ignorecase
filetype off                  " requireD
set number
set relativenumber
set rtp+=~/.vim/bundle/Vundle.vim
" set the runtime path to include Vundle and initialize
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" Plugin 'Yggdroot/indentLine'
" **************
Plugin 'KurtPreston/vim-autoformat-rails'
Plugin 'airblade/vim-gitgutter'
Plugin 'othree/xml.vim'
Plugin 'mattn/emmet-vim'
Plugin 'terryma/vim-expand-region'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'blueyed/vim-diminactive'
Plugin 'tommcdo/vim-exchange'
Plugin 'vim-ctrlspace/vim-ctrlspace'
Plugin 'wellle/targets.vim'
Plugin 'Raimondi/delimitMate'
" Plugin 'tnker/vim-sencha-util'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-unimpaired'
Plugin 'othree/yajs.vim'
Plugin 'othree/es.next.syntax.vim'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'Chun-Yang/vim-action-ag'
" Track the engine.
" Plugin 'SirVer/ultisnips'
Plugin 'tpope/vim-repeat'
" " Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
Plugin 'easymotion/vim-easymotion'
Plugin 'chriskempson/base16-vim'
Plugin 'Valloric/ListToggle'
" Plugin 'milkypostman/vim-togglelist'
" Plugin 'scrooloose/nerdtree'
Plugin 'kshenoy/vim-signature'
Plugin 'haya14busa/incsearch.vim'
Plugin 'justinmk/vim-sneak'
Plugin 'haya14busa/incsearch-fuzzy.vim'
" Plugin 'haya14busa/incsearch-easymotion.vim'
Plugin 'tpope/vim-sleuth'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-sensible'
Plugin 'marijnh/tern_for_vim', { 'do': 'npm install' }
" Plugin 'tpope/vim-vinegar'
Plugin 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx'] }
Plugin 'mxw/vim-jsx', { 'for': ['javascript', 'javascript.jsx'] }
Plugin 'gavocanov/vim-js-indent'
Plugin 'junegunn/vim-easy-align'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'scrooloose/nerdcommenter'
" Plugin 'leafgarland/typescript-vim'
Plugin 'jelera/vim-javascript-syntax'
" Plugin 'shemerey/vim-peepopen'
Plugin 'scrooloose/syntastic'
Plugin 'othree/html5-syntax.vim'
Plugin 'othree/html5.vim'
Plugin 'othree/javascript-libraries-syntax.vim'
" Plugin 'mileszs/ack.vim'
Plugin 'brookhong/ag.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'Quramy/tsuquyomi'
" plugin on GitHub repo
Plugin 'moll/vim-node'
Plugin 'sheerun/vim-polyglot'
Plugin 'tomtom/tcomment_vim'
Plugin 'mbbill/undotree'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'othree/jspc.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'kien/ctrlp.vim'
" **************************
" Plugin 'joonty/vdebug'
"plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
" filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin indent on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" if filereadable(expand("~/.vimrc_background"))
"    let base16colorspace=256
"    source ~/.vimrc_background
" endif
colorscheme base16-default-dark
syntax on
set background=dark
set incsearch

let g:javascript_plugin_jsdoc=1
let g:javascript_plugin_flow=1
let g:javascript_plugin_typescript=1
let g:syntastic_mode_map = { 'mode': 'active',
                            \ 'active_filetypes': ['python', 'javascript'],
                            \ 'passive_filetypes': [] }
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:jsx_ext_required = 0 
let g:statline_syntastic = 0
let g:syntastic_check_on_wq = 0
let g:tsuquyomi_disable_quickfix = 1
let g:syntastic_typescript_checkers = ['tsuquyomi']
let g:syntastic_javascript_checkers = ['eslint']
let g:tsuquyomi_completion_detail = 1
set foldmethod=syntax
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:NERDTreeWinPos="right"
autocmd Filetype javascript setlocal ts=4 sw=4 sts=0 noexpandtab
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
let g:ycm_add_preview_to_completeopt=0
let g:ycm_use_ultisnips_completer = 1
let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_confirm_extra_conf=0
let g:ycm_auto_trigger = 0
set completeopt-=preview
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsListSnippets="<c-l>"
let g:ctrlp_working_path_mode='ra'

let g:UltiSnipsEditSplit= "context"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
let g:UltiSnipsSnippetsDir = "~/.vim/bundle"

let g:used_javascript_libs = 'underscore,angularjs,angularui,angularuirouter,react,requirejs,jasmine,ramda,chai,handlebars,flux'
" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"kj
set showcmd
set textwidth=80
set foldlevel=99
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*.log,*/.idea/*,*/dist/*,*/.DS_Store,*/vendor/*,*/build/*,*/production/*,*/web/*,*/cordova/*,*/touch/*,*/packages/*
let g:ctrlp_custom_ignore = '\v[\/](node_modules)$'

augroup VimCSS3Syntax
  autocmd!

  autocmd FileType css setlocal iskeyword+=-
augroup END

set colorcolumn=120
"highlight ColorColumn ctermbg=green guibg=orange
highlight OverLength ctermbg=red ctermfg=white guibg=#592929

"match OverLength /\%81v.*/
" set statusline=%F
" set statusline=
map º $
nmap <C-s> <esc>:w<CR>
nmap <C-\> :e!#<CR>
set hidden
set ignorecase
function! s:incsearch_config(...) abort
    return incsearch#util#deepextend(deepcopy({
      \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
      \   'keymap': {
      \     "\<CR>": '<Over>(easymotion)'
      \   },
      \   'is_expr': 0
      \ }), get(a:, 1, {}))
endfunction
function! s:config_easyfuzzymotion(...) abort
    return extend(copy({
      \   'converters': [incsearch#config#fuzzyword#converter()],
      \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
      \   'keymap': {"\<CR>": '<Over>(easymotion)'},
      \   'is_expr': 0,
      \   'is_stay': 1
      \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())
" noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
" noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
" noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 0}))
" noremap <silent><expr> / incsearch#go(<SID>incsearch_config({'is_stay': 1}))
cnoreabbrev Ack Ack!
cnoreabbrev Ag Ag!
" nnoremap <Leader>a :Ack!<Space>
" nnoremap <Leader>a :Ag!<Space>
" nnoremap <Leader>w yiw:Ag!<Space><C-r>"
" nnoremap <Leader>w yiw:Ack!<Space><C-r>"
" nmap <script> <silent> <leader>Q :call ToggleLocationList()<CR>
" nmap <script> <silent> <leader>q :call ToggleQuickfixList()<CR>
nmap <script> <silent> <leader>s :pc<CR>
let g:lt_location_list_toggle_map = '<leader>Q'
let g:lt_quickfix_list_toggle_map = '<leader>q'
nnoremap <Leader>u :UndotreeToggle<CR>
map <Leader>M [{
map <Leader>m ]}
" map <Leader>n [M
" map <Leader>N ]m
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
map <leader>W yiw:ccl<CR>:bufdo<Space>:arga<Space>%<CR>:vimgrep<Space>/<C-r>"/<Space>##<CR>:cw<CR>:argd *<CR><C-w><S-j>
nmap <leader><leader>S <Plug>(easymotion-s2)
" nmap <leader><leader>D <Plug>(easymotion-t2)
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)
let g:EasyMotion_startofline = 0
let g:airline_theme='base16'
set noshowmode
" set noshowcmd
set noerrorbells visualbell t_vb=
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
if has('autocmd')
    autocmd GUIEnter * set visualbell t_vb=
  endif
set background=dark
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1
let g:indentLine_char = '|'
let g:indentLine_enabled = 0
let g:indentLine_leadingSpaceChar = '∙'
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_color_term = 237
map - :NERDTreeToggle<CR>
map gd :TernDef<CR>
let g:tern_map_keys=1
let g:sneak#streak = 1
map N Nzz
map n nzz
inoremap jj <Esc>
inoremap kj <Esc>
command! Greview :Git! diff --staged
noremap <leader>r <C-W>=
hi Search ctermfg=red ctermbg=0 guifg=#343d46 guibg=#ebcb8b
hi IncSearch ctermfg=red ctermbg=0 guifg=#343d46 guibg=#ebcb8b
hi IncSearchOnCursor ctermfg=red ctermbg=0 guifg=#343d46 guibg=#ebcb8b
au FileType qf call AdjustWindowHeight(3,20)
function! AdjustWindowHeight(minheight, maxheight)
    exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
  endfunction
set textwidth=0 wrapmargin=0
nmap =j :%!python -m json.tool<CR>
vmap =j :%!python -m json.tool<CR>
nmap <CR><CR> o<Esc>
nnoremap <C-J> a<CR><Esc>k$
nnoremap <leader>n :cnext<CR>zz
nmap <leader>N ]Q
nnoremap <leader>p :cprev<CR>zz
nmap <leader>P [Q
map <leader><leader>v :so ~/.vimrc \| BundleInstall<CR>
" nnoremap <silent><C-p> :CtrlSpace O<CR>
map <silent> <C-f> :SenchaParserReadCurrentLine<CR>
set nohlsearch
let g:ack_autoclose=1
let g:ag_autoclose=1
autocmd FileType qf nmap <buffer> <cr> <cr>:lcl<cr>
autocmd FileType qf nmap <buffer> <cr> <cr>:ccl<cr>
map K <Plug>(expand_region_expand)
map L <Plug>(expand_region_shrink)
autocmd FileType javascript noremap <buffer>  <c-b> :call JsBeautify()<cr>
autocmd FileType json noremap <buffer> <c-b> :call JsonBeautify()<cr>
autocmd FileType javascript.jsx noremap <buffer> <c-b> :call JsxBeautify()<cr>
autocmd FileType html noremap <buffer> <c-b> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-b> :call CSSBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <c-b> :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <c-b> :call RangeJsonBeautify()<cr>
autocmd FileType javascript.jsx vnoremap <buffer> <c-b> :call RangeJsxBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-b> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-b> :call RangeCSSBeautify()<cr>
"replace 'f' with 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
"replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T
let g:sneak#s_next = 1
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hr <Plug>GitGutterUndoHunk
nmap <Leader>hn <Plug>GitGutterNextHunk
omap ih <Plug>GitGutterTextObjectInnerPending
omap ah <Plug>GitGutterTextObjectOuterPending
xmap ih <Plug>GitGutterTextObjectInnerVisual
xmap ah <Plug>GitGutterTextObjectOuterVisual
nmap <Leader>hv <Plug>GitGutterPreviewHunk
match ErrorMsg '\s\+$'
runtime macros/matchit.vim
